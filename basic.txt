глобальные объекты
dirname - полный доступ к исполняемому файлу.
filename - весь путь к файлу,включая его имя и расширение
process - тип кофигурации,переменные окружения,версий итд
url - url адреса получаемые из сервера

console.log(__dirname);  /home/alexey/projects/node/basic
console.log(__filename)  /home/alexey/projects/node/basic/index.js
console.log(process);
console.log(process.env); обычно добавляются переменные окружения DEVELOP или PRODUCTION, в зависимости от них запускаются разные варианты окружения.
Можно установить переменную PATH с 3000 и слушать приложение на этом порту.

console.log(`Hello, ${process.argv[2]}`);  npm run start Oleksii -> Hello, Oleksii in terminal

const url = new URL("https://www.youtube.com/");

console.log(url);
console.log(url.hostname); www.youtube.com
console.log(url.href); https://www.youtube.com/
console.log(url.pathname);
console.log(url.hash);

const siteUrl = "http://localhost:8000/users?id=5123";

const newUrl = new URL(siteUrl);
console.log(newUrl);

URL {
  href: 'http://localhost:8000/users?id=5123',
  origin: 'http://localhost:8000',
  protocol: 'http:',
  username: '',
  password: '',
  host: 'localhost:8000',
  hostname: 'localhost',
  port: '8000',
  pathname: '/users',
  search: '?id=5123',
  searchParams: URLSearchParams { 'id' => '5123' },
  hash: ''
}

Process
const dotenv = require("dotenv")
dotenv.config()

console.log(process.pid);  id текущего  процесса 

"start":"cross-env PORT=5000 NODE_ENV=production nodemon index.js",
console.log(process.env.NODE_ENV); production
console.log(process.env.PORT); 5000

or with .env

console.log(process.env.NODE_ENV); production
console.log(process.env.PORT); 6000

Модуль path
const path = require("path");

join - склейка участков пути,абстрация склеивающая пути в независимости от опреационной системы на которой запускается приложение

console.log(path.join("first", "second", "third"));
console.log(
  "Склеить участки пути",
  path.join(__dirname, "first", "second", "third") Склеить участки пути /home/alexey/projects/node/basic/first/second/third
);

console.log("Склеить участки пути", path.join(__dirname, "..")); Склеить участки пути /home/alexey/projects/node

возврат абсолютного пути
console.log(
  "Получить абсолютный путь",
  path.resolve("first", "second", "third.js") Получить абсолютный путь /home/alexey/projects/node/basic/first/second/third
);

парсинг пути
const fullpath = path.resolve("first", "second", "third");
console.log("Парсинг пути", path.parse(fullpath));

console.log("Разделитель в OC", path.sep);
console.log("Проверка на абсолютный путь", path.isAbsolute("first/second"));
console.log("Название файла", path.basename(fullpath));
console.log("Расширение файла", path.extname(fullpath));

Модуль os
const os = require("os");

console.log(os.platform(), os.release()); linux 5.4.0-74-generic
console.log(os.arch()); x64
console.log(os.cpus().length); к-во ядер процессора

Модуль fs
const fs = require("fs");

Получение доступа к файлу и чтение введенного текста
Асинхронный вариант
fs.readFile("./test.txt", (error, data) => {
  console.log(data); <Buffer 48 65 6c 6c 6f 21 0a 4d 79 20 6e 61 6d 65 20 69 73 20 4f 6c 65 6b 73 69 69>
  console.log(data.toString()); Hello! My name is Oleksii!
});

указываем кодировку
fs.readFile("./test.txt", "utf-8", (error, data) => {
  console.log(data); //Hello! My name is Oleksii!
});

console.log("test"); отработает быстрее

запись
fs.readFile("./test.txt", "utf-8", (error, data) => {
   создание копии
  fs.writeFile("./test2.txt", data, () => {});
   добавление нового текста
  fs.writeFile("./test3.txt", `${data} New text!`, () => {});
});

добавление в несуществующую папку
fs.readFile("./test.txt", "utf-8", (error, data) => {
  fs.writeFile(
    ".files/test4.txt",
    `${data} New text in new folder!`,
    (error) => {
      error ? console.log(error) : null;
    }
  );
}); 

создание папки
fs.mkdir('./files',()=>{

})

fs.readFile("./test.txt", "utf-8", (error, data) => {
  fs.mkdir("./files", () => {
    fs.writeFile(
      "./files/test4.txt",
      `${data} New text in new folder!`,
      (error) => {
        error ? console.log(error) : null;
      }
    );
  });
});

синхронное выполнение
fs.readFile("./test.txt", "utf-8", (error, data) => {
  fs.mkdirSync("./files", () => {
    fs.writeFileSync(
      "./files/test4.txt",
      `${data} New text in new folder!`,
      (error) => {
        error ? console.log(error) : null;
      }
    );
  });
}); 

удаление файлов и папок
setTimeout(() => {
  if (fs.existsSync("./files/test4.txt")) {
    fs.unlink("./files/test4.txt", () => {});
  }
}, 4000);

setTimeout(() => {
  if (fs.existsSync("./files")) {
    fs.rmdir("./files", () => {});
  }
}, 6000);

Buffer and streams
const fs = require("fs");
const zlib = require("zlib");

читающий поток
const readStream = fs.createReadStream("./docs/text.txt"); 

пишуший поток
const writeStream = fs.createWriteStream("./docs/new-text.txt") 

chunk - порция данных
readStream.on("data", (chunk) => {
  console.log("--------");
  console.log(chunk);
  console.log(chunk.toString());
}); 

добавление записывающего потока внутрь читающего.Сначала происходит чтение большого файла по кускам и каждый прочитанный кусок будет передаваться записывающим потокам в новый файл.
 readStream.on("data", (chunk) => {
  writeStream.write("\n---CHUNK START---\n");
  writeStream.write(chunk);
  writeStream.write("\n---CHUNK END---\n");
}); 

чтение получаемых данных  и прямая передача в пишуший стрим

readStream.pipe(writeStream);

получаем ошибку если переименуем файл
readStream.on("error", handleError).pipe(writeStream).on("error", handleError);

const readStream = fs.createReadStream("./docs/text.txt");
const writeStream = fs.createWriteStream("./docs/last-new-text.txt");
const compressStream = zlib.createGzip();

функция отловок ошибок при чтении или записи

const handleError = () => {
  console.log("Error");
  readStream.destroy();
  writeStream.end("Finished with error...");
};

трансформирующий поток(изменение данных)
readStream
  .on("error", handleError)
  .pipe(compressStream)
  .pipe(writeStream)
  .on("error", handleError);

Модуль events - создание,генерирование,подписка на событие. 
const Emitter = require("events");
const emitter = new Emitter();

пользовательское событие
1 аргумент - название
2 аргумент - колбек,отрабатывающий при генерации события.Принимет неограниченное к-во аргументов.
emitter.on("message", (data, second) => {
  console.log("Вы прислали сообщение " + data);
  console.log("Второй аргумент " + second);
});

генерация события
const MESSAGE = process.env.message || "234";

if (MESSAGE) {
  emitter.emit("message", MESSAGE, 123);
} else {
  emitter.emit("message", "Вы не указали сообщение");
}

output-Вы прислали сообщение 234 / Второй аргумент 123

const MESSAGE = process.env.message || "";

if (MESSAGE) {
  emitter.emit("message", MESSAGE, 123);
} else {
  emitter.emit("message", "Вы не указали сообщение");
}

output-Вы прислали сообщение Вы не указали сообщение / Второй аргумент undefined

Использование - создание http серверов,обмен сообщениями,генерация события на определенное действие,вебсокеты,кластеризация.
Практически любой модуль node js использует в себе концепцию событийно-ориентированной модели

генерация события один раз
emitter.once("message", (data, second) => {
  console.log("Вы прислали сообщение " + data);
  console.log("Второй аргумент " + second);
});

события можно генерировать бесконечное к-во раз
emitter.emit("message");
emitter.emit("message");
emitter.emit("message");
emitter.emit("message");
emitter.emit("message");

на одно и тоже название события можно вешать несколько разных колбеков
const callback = (data, second) => {
  console.log("Вы прислали сообщение " + data);
  console.log("Второй аргумент " + second);
};
emitter.once("message", callback);

удаление конкретного слушателя
emitter.removeListener("message", callback);

удаление всех слушателей
emitter.removeAllListeners()

примеры
emitter.on("event", (arg) => {
  const { id, text } = arg;
  console.log(id, text);
});

emitter.emit("event", { id: 1, text: "Event test text" });

логирование пользователя
const Emitter = require("events");

class Logger extends Emitter {
  log = (msg) => {
    console.log(msg);
    this.emit("event", { id: 1, text: "Event test text" });
  };
}

const logger = new Logger();

logger.on("event", (arg) => {
  const { id, text } = arg;
  console.log(id, text);
});

logger.log("User Logger!");

Модуль http
const http = require("http");

создание сервера
req и res - объеты запроса и ответа.req хранит информацию которую можно использвать в сервере.res - формирующийся объект для отправки в браузер.

const server = http.createServer((req, res) => {
  console.log("Server request");
  console.log(req.url); /
  console.log(req.method); GET

  response header,content type of response
  res.setHeader("Content-Type", "application/json");

  res.write('<head><link rel="stylesheet" href="#"></head>');

  res.write("<h1>hello world!</h1>");
  res.write("<p>My name is Oleksii</p>");

  return json
  const data = JSON.stringify([
    { name: "Tom", age: 35 },
    { name: "Arthur", age: 40 },
  ]);

  final of response
  res.end(data);
});

const PORT = 3000;

порт для прослушки сервером
server.listen(PORT, "localhost", (error) => {
  error ? console.log(error) : console.log(`listening port ${PORT}`);
});

роутинг
const server = http.createServer((req, res) => {
  console.log("Server request");

  res.setHeader("Content-Type", "text/html");

  const createPath = (page) => path.resolve(__dirname, "views", `${page}.html`);

  let basePath = "";

  присвоение пути для каждой html страницы
  switch (req.url) {
    case "/":
    case "/home":
    case "/index.html":
      basePath = createPath("index");
      res.statusCode = 200;
      break;
    redirect
    case "/about-us":
      res.statusCode = 301;
      res.setHeader("Location", "/contacts");
      res.end();
      break;
    case "/contacts":
      basePath = createPath("contacts");
      res.statusCode = 200;
      break;
    default:
      basePath = createPath("error");
      res.statusCode = 404; ошибка о несуществующей странице
      break;
  }

  fs.readFile(basePath, (err, data) => {
    if (err) {
      console.log(err);
      res.statusCode = 500; внутренняя серверная ошибка(потеря доступа к файлу)
      res.end(data);
    } else {
      res.write(data);
      res.end();
    }
  });
});

const PORT = 3000;

server.listen(PORT, "localhost", (error) => {
  error ? console.log(error) : console.log(`listening port ${PORT}`);
});

Реализация серверного роутинга - при переходе по определенному url адресу возвращать новую разметку.
При работе с запросами и ответами всегда необходимо завершать ответ для возвращения контроля браузеру.
Определяется какой url адрес прилетает в запросе, и в зависимости от этого возвращатся нужная страница.